" vim: set foldmethod=marker foldlevel=0:

" ============================================================================
" .vimrc of Chih-Wei Chang {{{
" ============================================================================

let s:darwin = has('mac')

" We reset the vimrc augroup. Autocommands are added to this group throughout
" the file
augroup vimrc
  autocmd!
augroup END

" }}}
" ============================================================================

" ============================================================================
" VIM-PLUG BLOCK {{{
" ============================================================================

silent! if plug#begin('~/.nvim/plugged')

if s:darwin
  let g:plug_url_format = 'git@github.com:%s.git'
else
  let $GIT_SSL_NO_VERIFY = 'true'
endif

" Ruby, Rails, Rake...
" by default this syntax is used with all *_spec.rb
Plug 'ck3g/vim-change-hash-syntax'
Plug 'Keithbsmiley/rspec.vim'
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'
Plug 'skalnik/vim-vroom'

" Javascript...
Plug 'justinj/vim-react-snippets'
Plug 'kchmck/vim-coffee-script'
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
" Plug 'mxw/vim-jsx'
" Plug 'othree/vim-jsx'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'othree/yajs.vim'
Plug 'pangloss/vim-javascript'
" Plug 'vim-scripts/JSON.vim'
" Plug 'jiangmiao/simple-javascript-indenter'
" Plug 'othree/jspc.vim'
" Plug 'bigfish/vim-js-context-coloring'

" Html, Xml, Css, Markdown...
Plug 'helino/vim-json'
Plug 'mattn/emmet-vim'
Plug 'othree/html5.vim'
Plug 'tpope/vim-markdown'
Plug 'kannokanno/previm'
Plug 'tyru/open-browser.vim'

" Haskell...
" Plug 'bitc/vim-hdevtools'

" Go...
Plug 'fatih/vim-go'

" Latex
Plug 'gerw/vim-latex-suite'

" Python
Plug 'ivanov/vim-ipython'
Plug 'klen/python-mode'

" Other languages...
Plug 'lazywei/vim-matlab'
Plug 'ekalinin/Dockerfile.vim'
Plug 'wting/rust.vim'
Plug 'cespare/vim-toml'
Plug 'lazywei/vim-swig'

" Git related...
Plug 'chrisbra/vim-diff-enhanced'
Plug 'mattn/gist-vim'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'

" Code completion
" See: https://github.com/junegunn/vim-plug/wiki/faq#loading-plugins-manually
Plug 'Valloric/YouCompleteMe', { 'on': [], 'do': './install.sh --clang-completer --gocode-completer' }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'honza/vim-snippets', { 'on': [] }
augroup load_us_ycm
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips', 'vim-snippets', 'YouCompleteMe')
                     \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END

" Unite...
" vimproc need manually build
Plug 'Shougo/vimproc.vim'

" Tmux...
Plug 'benmills/vimux'
Plug 'jingweno/vimux-zeus'

" General improvements...
Plug 'editorconfig/editorconfig-vim'
" Plug 'techlivezheng/vim-plugin-minibufexpl'
" Plug 'justinmk/vim-sneak'
Plug 'justinmk/vim-gtfo'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }
Plug 'junegunn/vim-peekaboo'
" Plug 'lazywei/YankRing.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'mattn/webapi-vim'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'nelstrom/vim-visual-star-search'
Plug 'osyo-manga/vim-over', { 'on':  'OverCommandLine' }
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'szw/vim-ctrlspace'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-vinegar'
Plug 'Valloric/MatchTagAlways'
Plug 'vim-scripts/matchit.zip'
Plug 'vim-scripts/VisIncr'
" Find out where maps are defined
" Plug 'vim-scripts/listmaps.vim'
" Plug 'xuhdev/SingleCompile'

" Text objects...
Plug 'bootleq/vim-textobj-rubysymbol', { 'for': ['ruby', 'haml'] }
Plug 'briandoll/change-inside-surroundings.vim'
Plug 'coderifous/textobj-word-column.vim'
Plug 'kana/vim-textobj-user'
Plug 'lucapette/vim-textobj-underscore'
Plug 'michaeljsmith/vim-indent-object'
Plug 'nelstrom/vim-textobj-rubyblock', { 'for': ['ruby', 'haml'] }

" Cosmetics, color scheme, Powerline...
Plug 'bling/vim-airline'
" Plug 'jnurmine/Zenburn'
Plug 'junegunn/seoul256.vim'
" Plug 'Valloric/vim-valloric-colorscheme'
" Plug 'nanotech/jellybeans.vim'
Plug 'jaxbot/semantic-highlight.vim'


" Tags...
Plug 'szw/vim-tags'
Plug 'majutsushi/tagbar'
Plug 'xolox/vim-misc'
Plug 'tomtom/tlib_vim'
" Plug 'xolox/vim-easytags'

" My plugins...
Plug 'lazywei/vim-language-specific'
" Plug 'lazywei/vim-doc-tw'
Plug 'lazywei/vim-sourcegraph'

call plug#end()
endif
" }}}
" ============================================================================

" ============================================================================
" BASIC SETTINGS {{{
" ============================================================================

let mapleader      = ' '
let maplocalleader = ' '

" In normal mode, we use : much more often than ; so lets swap them.
" WARNING: this will cause any "ordinary" map command without the "nore" prefix
" that uses ":" to fail. For instance, "map <f2> :w" would fail, since vim will
" read ":w" as ";w" because of the below remappings. Use "noremap"s in such
" situations and you'll be fine.
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

syntax enable

" DISPLAY SETTINGS {{{ 1
colorscheme seoul256
set nu
set scrolloff=2         " 2 lines above/below cursor when scrolling
set sidescroll=1
set sidescrolloff=15
set showmatch           " show matching bracket (briefly jump)
set matchtime=2         " reduces matching paren blink time from the 5[00]ms def
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set undofile            " stores undo state even when files are closed (in undodir)
set cursorline          " highlights the current line

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu            " completion with menu
" This changes the default display of tab and CR chars in list mode
set list listchars=tab:\|\ ,trail:Â·

" The "longest" option makes completion insert the longest prefix of all
" the possible matches; see :h completeopt
set completeopt=menu,menuone,longest
set switchbuf=useopen,usetab

" }}} 1

" EDITOR SETTINGS {{{ 2
set ignorecase          " case insensitive searching
set smartcase           " but become case sensitive if you type uppercase characters
" this can cause problems with other filetypes
" see comment on this SO question http://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim/234578#234578
"set smartindent         " smart auto indenting
set autoindent          " on new lines, match indent of previous line
set copyindent          " copy the previous indentation on autoindenting
set cindent             " smart indenting for c-like code
set cino=b1,g0,N-s,t0,(0,W4  " see :h cinoptions-values
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set nobackup            " no backup~ files.
set nojoinspaces

" set tabstop=2           " number of spaces a tab counts for
" set shiftwidth=2        " spaces for autoindents
set softtabstop=2
set shiftround          " makes indenting a multiple of shiftwidth
set expandtab           " turn a tab into spaces
set laststatus=2        " the statusline is now always shown
set showmode            " show mode in status bar (insert/replace/...)

set virtualedit=block

set encoding=utf-8

" }}} 2

" MISC SETTINGS {{{ 3
set fileformat=unix     " file mode is unix
set fileformats=unix,dos,mac   " detects unix, dos, mac file formats in that order

set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo
                        " file -- 20 jump links, regs up to 500 lines'

set hidden              " allows making buffers hidden even with unsaved changes
set history=1000        " remember more commands and search history
set undolevels=1000     " use many levels of undo
set autoread            " auto read when a file is changed from the outside
set mouse=a             " enables the mouse in all modes
set foldlevelstart=99   " all folds open by default

" tries to avoid those annoying "hit enter to continue" messages
" if it still doesn't help with certain commands, add a second <cr>
" at the end of the map command
set shortmess=aIT

set tags=./tags;/

" turns off all error bells, visual or otherwise
set noerrorbells visualbell t_vb=

" none of these should be word dividers, so make them not be
set iskeyword+=_,$,@,%,#

" allow backspace and cursor keys to cross line boundaries
set whichwrap+=<,>,h,l,[,],b,s
set hlsearch            " Highlight search things
set incsearch           " ...but do highlight-as-I-type the search string
set gdefault            " this makes search/replace global by default

" enforces a specified line-length and auto inserts hard line breaks when we
" reach the limit; in Normal mode, you can reformat the current paragraph with
" gqap.
set textwidth=80

" this makes the color after the textwidth column highlighted
set colorcolumn=+1

" options for formatting text; see :h formatoptions
set formatoptions=tcroqnj

if v:version >= 704
  " The new Vim regex engine is currently slooooow as hell which makes syntax
  " highlighting slow, which introduces typing latency.
  " Consider removing this in the future when the new regex engine becomes
  " faster.
  set regexpengine=1
endif

set clipboard+=unnamedplus     " Use system clipboard


set diffopt=filler,vertical
set grepformat=%f:%l:%c:%m,%f:%l:%m
set lazyredraw
set linebreak
" set nolazyredraw             " Don't redraw while executing macros
set nowb                       " Prevents automatic write backup before overwriting file

" Keep the cursor on the same column
set nostartofline

" }}} 3

" }}}
" ============================================================================

" ============================================================================
" MORE INVOVLED SETTINGS {{{
" ============================================================================

" Unicode support (taken from http://vim.wikia.com/wiki/Working_with_Unicode)
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
endif

augroup vimrc
  autocmd FileType text,markdown,gitcommit set nocindent
  " Auto turn on spell check for markdown file, gitcommit
  autocmd FileType markdown setlocal spell! spelllang=en_us
  autocmd FileType gitcommit setlocal spell! spelllang=en_us
augroup END

try
  lang zh_TW
catch
endtry

" Go back to the location last time edited when open files.
if has("autocmd")
  autocmd vimrc BufRead *.txt set tw=78
  autocmd vimrc BufReadPost *
        \ if line("'\"") > 0 && line ("'\"") <= line("$") |
        \   exe "normal g'\"" |
        \ endif
endif

" }}}
" ============================================================================

" ============================================================================
" BLOCK SAMPLE {{{
" ============================================================================
" }}}
" ============================================================================

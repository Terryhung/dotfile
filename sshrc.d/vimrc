set rtp+=$VIM_HOME

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-surround'

Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'

Plug 'junegunn/vim-easy-align'
Plug 'junegunn/seoul256.vim'
Plug 'Lokaltog/vim-easymotion'

Plug 'lazywei/YankRing.vim'

Plug 'bling/vim-airline'

" Code completion
" See: https://github.com/junegunn/vim-plug/wiki/faq#loading-plugins-manually
Plug 'Valloric/YouCompleteMe', { 'on': [], 'do': './install.sh --clang-completer' }
Plug 'SirVer/ultisnips', { 'on': [] }
Plug 'honza/vim-snippets', { 'on': [] }
augroup load_us_ycm
  autocmd!
  autocmd InsertEnter * call plug#load('ultisnips', 'vim-snippets', 'YouCompleteMe')
                     \| call youcompleteme#Enable() | autocmd! load_us_ycm
augroup END

call plug#end()

let mapleader = ","

" In normal mode, we use : much more often than ; so lets swap them.
" WARNING: this will cause any "ordinary" map command without the "nore" prefix
" that uses ":" to fail. For instance, "map <f2> :w" would fail, since vim will
" read ":w" as ";w" because of the below remappings. Use "noremap"s in such
" situations and you'll be fine.
nnoremap ; :
nnoremap : ;
vnoremap ; :
vnoremap : ;

" When you type the first tab, it will complete as much as possible, the second
" tab hit will provide a list, the third and subsequent tabs will cycle through
" completion options so you can complete the file without further keys
set wildmode=longest,list,full
set wildmenu                   " completion with menu
set wrap                       " Wrap lines
set whichwrap+=<,>,h,l,[,]

set list listchars=tab:\ \ ,trail:Â·
set nu


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Custom mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let maplocalleader= ' '
map 0 ^
noremap ,. :noh<cr>

nnoremap <leader>w :w!<cr>

" Fast editing of the .vimrc
noremap <leader>v :e ~/.vimrc<CR>
noremap <silent> <leader>V :source $MYVIMRC<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Treat long lines as break lines (useful when moving around in them):
map j gj
map k gk

" Map space to / (search) and c-space to ? (backgwards search)
map <space> /\v

" Smart way to move btw. windows
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-h> <C-W>h
nnoremap <C-l> <C-W>l

" Indent
nmap <tab> v>
nmap <s-tab> v<

" Use the arrows to something usefull
noremap <right> :bn<cr>
noremap <left> :bp<cr>

" Tab configuration
noremap <leader>tn :tabnew<CR>
noremap <leader>te :tabedit<space>
noremap <leader>tm :tabmove<space>
noremap <leader>e :edit<space>

" Keep search matches in the middle of the window.
" zz centers the screen on the cursor, zv unfolds any fold if the cursor
" suddenly appears inside a fold.
nnoremap * *zzzv
nnoremap # #zzzv
nnoremap n nzzzv
nnoremap N Nzzzv

" Spelling {{{
" turn on the spell checking and set the English language
noremap <leader>ss :setlocal spell! spelllang=en_us<cr>
" jump to the next bad spell word
noremap <Leader>sn ]s
" suggest words
noremap <Leader>sp z=
" jump to the next bad spell word and suggests a correct one
noremap <Leader>sc ]sz=
" add word to the dictionary
noremap <Leader>sa zg
" }}}

" Switch between buffers
noremap <S-h> :bp<CR>
noremap <S-l> :bn<CR>

" Close the current buffer

nnoremap <Leader>K <C-w>c
nnoremap <silent><Leader>k :Bclose<CR>
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
  let l:currentBufNum = bufnr("%")
  let l:alternateBufNum = bufnr("#")

  if buflisted(l:alternateBufNum)
    buffer #
  else
    bnext
  endif

  if bufnr("%") == l:currentBufNum
    new
  endif

  if buflisted(l:currentBufNum)
    execute("bdelete! ".l:currentBufNum)
  endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Insert mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" with this, we can now type ",." to exit out of insert mode
" if we really wanted to type ",.", then just type one char, wait half a sec,
" type another
inoremap ,. <Esc>
inoremap ,1 ()<esc>i
inoremap ,2 []<esc>i
inoremap ,3 {}<esc>i
inoremap ,4 {<esc>o}<esc>O
inoremap ,q ''<esc>i
inoremap ,e ""<esc>i
inoremap ,t <><esc>i


" Fast jump to the end of line in insert mode
inoremap <leader>A <esc>A

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual mode
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap ,1 <esc>`>a)<esc>`<i(<esc>
vnoremap ,2 <esc>`>a]<esc>`<i[<esc>
vnoremap ,3 <esc>`>a}<esc>`<i{<esc>
vnoremap ,q <esc>`>a'<esc>`<i'<esc>
vnoremap ,e <esc>`>a"<esc>`<i"<esc>

vmap <tab> >gv
vmap <s-tab> <gv

vnoremap <C-r> "hy:%s/<C-r>h//c<left><left>
vnoremap ,. <Esc>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Strip trailing whitespace
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" via: http://rails-bestpractices.com/posts/60-remove-trailing-whitespace
" Strip trailing whitespace
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction
command! StripTrailingWhitespaces call <SID>StripTrailingWhitespaces()
nnoremap <leader><space> :StripTrailingWhitespaces<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tmux
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move between Vim and Tmux windows {{{

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      " The sleep and & gives time to get back to vim so tmux's focus tracking
      " can kick in and send us our ^[[O
      execute "silent !sh -c 'sleep 0.01; tmux select-pane -" . a:tmuxdir . "' &"
      redraw!
    endif
  endfunction
  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te
  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<CR>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<CR>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<CR>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<CR>
else
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YCM
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NerdTree
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>d :NERDTreeToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => UltiSnips
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => EasyAlign
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => YankRing
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:yankring_history_dir = '$HOME/tmp/vim'
nnoremap <leader>yr :YRShow<CR>

" Since vim multiple cursors use ctrl-p ctrl-n, we change to use alt.
" let g:yankring_replace_n_pkey = '<C-p> h'
" let g:yankring_replace_n_nkey = '<C-p> l'

" this makes Y yank from the cursor to the end of the line, which makes more
" sense than the default of yanking the whole current line (we can use yy for that)
function! YRRunAfterMaps()
  nnoremap Y :<C-U>YRYankCount 'y$'<CR>
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Airline
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1
